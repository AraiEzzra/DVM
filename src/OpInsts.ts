import { OpCode } from 'src/OpCode';
import { OpInst, OpInstSync, OpInstAsync } from 'src/OpInst';

import {
    opTemp,
    opStop,
    opPush,
    opAdd,
    opSub,
    opMul,
    opDiv,
    opSdiv,
    opMod,
    opSmod,
    opAddmod,
    opMulmod,
    opExp,
    opSignExtend,
    opLt,
    opGt,
    opSlt,
    opSgt,
    opEq,
    opIszero,
    opAnd,
    opOr,
    opXor,
    opNot,
    opByte,
    opSHL,
    opSHR,
    opSAR
} from 'src/opFn';

export const OpInstList: Array<OpInst> = [

    // arithmetic
    new OpInstSync(OpCode.STOP, 0, opStop),
    new OpInstSync(OpCode.ADD, 3, opAdd),
    new OpInstSync(OpCode.MUL, 5, opMul),
    new OpInstSync(OpCode.SUB, 3, opSub),
    new OpInstSync(OpCode.DIV, 5, opDiv),
    new OpInstSync(OpCode.SDIV, 5, opSdiv),
    new OpInstSync(OpCode.MOD, 5, opMod),
    new OpInstSync(OpCode.SMOD, 5, opSmod),
    new OpInstSync(OpCode.ADDMOD, 8, opAddmod),
    new OpInstSync(OpCode.MULMOD, 8, opMulmod),
    new OpInstSync(OpCode.EXP, 10, opExp),
    new OpInstSync(OpCode.SIGNEXTEND, 5, opSignExtend),

    // boolean
    new OpInstSync(OpCode.LT, 3, opLt),
    new OpInstSync(OpCode.GT, 3, opGt),
    new OpInstSync(OpCode.SLT, 3, opSlt),
    new OpInstSync(OpCode.SGT, 3, opSgt),
    new OpInstSync(OpCode.EQ, 3, opEq),
    new OpInstSync(OpCode.ISZERO, 3, opIszero),
    new OpInstSync(OpCode.AND, 3, opAnd),
    new OpInstSync(OpCode.OR, 3, opOr),
    new OpInstSync(OpCode.XOR, 3, opXor),
    new OpInstSync(OpCode.NOT, 3, opNot),
    new OpInstSync(OpCode.BYTE, 3, opByte),
    new OpInstSync(OpCode.SHL, 3, opSHL),
    new OpInstSync(OpCode.SHR, 3, opSHR),
    new OpInstSync(OpCode.SAR, 3, opSAR),

    // crypto
    new OpInstSync(OpCode.SHA3, 30, opTemp),

    // contract context
    new OpInstSync(OpCode.ADDRESS, 2, opTemp),
    new OpInstSync(OpCode.BALANCE, 400, opTemp),
    new OpInstSync(OpCode.ORIGIN, 2, opTemp),
    new OpInstSync(OpCode.CALLER, 2, opTemp),
    new OpInstSync(OpCode.CALLVALUE, 2, opTemp),
    new OpInstSync(OpCode.CALLDATALOAD, 3, opTemp),
    new OpInstSync(OpCode.CALLDATASIZE, 2, opTemp),
    new OpInstSync(OpCode.CALLDATACOPY, 3, opTemp),
    new OpInstSync(OpCode.CODESIZE, 2, opTemp),
    new OpInstSync(OpCode.CODECOPY, 3, opTemp),
    new OpInstSync(OpCode.GASPRICE, 2, opTemp),
    new OpInstSync(OpCode.EXTCODESIZE, 700, opTemp),
    new OpInstSync(OpCode.EXTCODECOPY, 700, opTemp),

    // blockchain context
    new OpInstSync(OpCode.RETURNDATASIZE, 2, opTemp),
    new OpInstSync(OpCode.RETURNDATACOPY, 3, opTemp),
    new OpInstSync(OpCode.EXTCODEHASH, 400, opTemp),
    new OpInstSync(OpCode.BLOCKHASH, 20, opTemp),
    new OpInstSync(OpCode.COINBASE, 2, opTemp),
    new OpInstSync(OpCode.TIMESTAMP, 2, opTemp),
    new OpInstSync(OpCode.NUMBER, 2, opTemp),
    new OpInstSync(OpCode.DIFFICULTY, 2, opTemp),
    new OpInstSync(OpCode.GASLIMIT, 2, opTemp),

    // storage and execution
    new OpInstSync(OpCode.POP, 2, opTemp),
    new OpInstSync(OpCode.MLOAD, 3, opTemp),
    new OpInstSync(OpCode.MSTORE, 3, opTemp),
    new OpInstSync(OpCode.MSTORE8, 3, opTemp),
    new OpInstSync(OpCode.SLOAD, 200, opTemp),
    new OpInstSync(OpCode.SSTORE, 0, opTemp),
    new OpInstSync(OpCode.JUMP, 8, opTemp),
    new OpInstSync(OpCode.JUMPI, 10, opTemp),
    new OpInstSync(OpCode.PC, 2, opTemp),
    new OpInstSync(OpCode.MSIZE, 2, opTemp),
    new OpInstSync(OpCode.GAS, 2, opTemp),
    new OpInstSync(OpCode.JUMPDEST, 1, opTemp),

    // push
    new OpInstSync(OpCode.PUSH1, 3, opPush),
    new OpInstSync(OpCode.PUSH2, 3, opPush),
    new OpInstSync(OpCode.PUSH3, 3, opPush),
    new OpInstSync(OpCode.PUSH4, 3, opPush),
    new OpInstSync(OpCode.PUSH5, 3, opPush),
    new OpInstSync(OpCode.PUSH6, 3, opPush),
    new OpInstSync(OpCode.PUSH7, 3, opPush),
    new OpInstSync(OpCode.PUSH8, 3, opPush),
    new OpInstSync(OpCode.PUSH9, 3, opPush),
    new OpInstSync(OpCode.PUSH10, 3, opPush),
    new OpInstSync(OpCode.PUSH11, 3, opPush),
    new OpInstSync(OpCode.PUSH12, 3, opPush),
    new OpInstSync(OpCode.PUSH13, 3, opPush),
    new OpInstSync(OpCode.PUSH14, 3, opPush),
    new OpInstSync(OpCode.PUSH15, 3, opPush),
    new OpInstSync(OpCode.PUSH16, 3, opPush),
    new OpInstSync(OpCode.PUSH17, 3, opPush),
    new OpInstSync(OpCode.PUSH18, 3, opPush),
    new OpInstSync(OpCode.PUSH19, 3, opPush),
    new OpInstSync(OpCode.PUSH20, 3, opPush),
    new OpInstSync(OpCode.PUSH21, 3, opPush),
    new OpInstSync(OpCode.PUSH22, 3, opPush),
    new OpInstSync(OpCode.PUSH23, 3, opPush),
    new OpInstSync(OpCode.PUSH24, 3, opPush),
    new OpInstSync(OpCode.PUSH25, 3, opPush),
    new OpInstSync(OpCode.PUSH26, 3, opPush),
    new OpInstSync(OpCode.PUSH27, 3, opPush),
    new OpInstSync(OpCode.PUSH28, 3, opPush),
    new OpInstSync(OpCode.PUSH29, 3, opPush),
    new OpInstSync(OpCode.PUSH30, 3, opPush),
    new OpInstSync(OpCode.PUSH31, 3, opPush),
    new OpInstSync(OpCode.PUSH32, 3, opPush),

    // duplicate
    new OpInstSync(OpCode.DUP1, 3, opTemp),
    new OpInstSync(OpCode.DUP2, 3, opTemp),
    new OpInstSync(OpCode.DUP3, 3, opTemp),
    new OpInstSync(OpCode.DUP4, 3, opTemp),
    new OpInstSync(OpCode.DUP5, 3, opTemp),
    new OpInstSync(OpCode.DUP6, 3, opTemp),
    new OpInstSync(OpCode.DUP7, 3, opTemp),
    new OpInstSync(OpCode.DUP8, 3, opTemp),
    new OpInstSync(OpCode.DUP9, 3, opTemp),
    new OpInstSync(OpCode.DUP10, 3, opTemp),
    new OpInstSync(OpCode.DUP11, 3, opTemp),
    new OpInstSync(OpCode.DUP12, 3, opTemp),
    new OpInstSync(OpCode.DUP13, 3, opTemp),
    new OpInstSync(OpCode.DUP14, 3, opTemp),
    new OpInstSync(OpCode.DUP15, 3, opTemp),
    new OpInstSync(OpCode.DUP16, 3, opTemp),

    // swap
    new OpInstSync(OpCode.SWAP1, 3, opTemp),
    new OpInstSync(OpCode.SWAP2, 3, opTemp),
    new OpInstSync(OpCode.SWAP3, 3, opTemp),
    new OpInstSync(OpCode.SWAP4, 3, opTemp),
    new OpInstSync(OpCode.SWAP5, 3, opTemp),
    new OpInstSync(OpCode.SWAP6, 3, opTemp),
    new OpInstSync(OpCode.SWAP7, 3, opTemp),
    new OpInstSync(OpCode.SWAP8, 3, opTemp),
    new OpInstSync(OpCode.SWAP9, 3, opTemp),
    new OpInstSync(OpCode.SWAP10, 3, opTemp),
    new OpInstSync(OpCode.SWAP11, 3, opTemp),
    new OpInstSync(OpCode.SWAP12, 3, opTemp),
    new OpInstSync(OpCode.SWAP13, 3, opTemp),
    new OpInstSync(OpCode.SWAP14, 3, opTemp),
    new OpInstSync(OpCode.SWAP15, 3, opTemp),
    new OpInstSync(OpCode.SWAP16, 3, opTemp),

    // logging
    new OpInstSync(OpCode.LOG1, 375, opTemp),
    new OpInstSync(OpCode.LOG2, 375, opTemp),
    new OpInstSync(OpCode.LOG3, 375, opTemp),
    new OpInstSync(OpCode.LOG4, 375, opTemp),
    new OpInstSync(OpCode.LOG5, 375, opTemp),

    // closures
    new OpInstSync(OpCode.CREATE, 32000, opTemp),
    new OpInstSync(OpCode.CALL, 700, opTemp),
    new OpInstSync(OpCode.CALLCODE, 700, opTemp),
    new OpInstSync(OpCode.RETURN, 0, opTemp),
    new OpInstSync(OpCode.DELEGATECALL, 700, opTemp),
    // SUICIDE

    // ??
    new OpInstSync(OpCode.CREATE2, 32000, opTemp),
    new OpInstSync(OpCode.STATICCALL, 700, opTemp),
    new OpInstSync(OpCode.REVERT, 0, opTemp),
    new OpInstSync(OpCode.INVALID, 0, opTemp),
    new OpInstSync(OpCode.SELFDESTRUCT, 5000, opTemp)
]

export const OpInsts: Map<OpCode, OpInst> = new Map(OpInstList.map(item => [item.opCode, item]));
